from typing import Dict
from datetime import datetime
import os

class ReportGenerator:
    def __init__(self):
        self.template_path = "templates/"
    
    def generate_comprehensive_report(self, processed_data: Dict) -> str:
        """Generate a comprehensive research report"""
        
        person_data = processed_data.get('person', {})
        company_data = processed_data.get('company', {})
        insights_data = processed_data.get('insights', {})
        metadata = processed_data.get('metadata', {})
        
        report = f"""# Research Report: {person_data.get('name', 'Unknown')} at {company_data.get('name', 'Unknown')}

*Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*
*Sources analyzed: {metadata.get('total_sources', 0)}*

---

## 🧑‍💼 Person Profile

**Name:** {person_data.get('name', 'N/A')}  
**Company:** {person_data.get('company', 'N/A')}  
**Role Type:** {person_data.get('type', 'Unknown').title()}  

### Professional Analysis
{person_data.get('analysis', 'No analysis available.')}

### Key Points
"""
        
        # Add key points for person
        person_key_points = person_data.get('key_points', [])
        if person_key_points:
            for i, point in enumerate(person_key_points, 1):
                report += f"{i}. {point}\n"
        else:
            report += "- No key points extracted\n"
        
        report += f"""

---

## 🏢 Company Analysis

**Company:** {company_data.get('name', 'N/A')}  
**Type:** {company_data.get('type', 'Unknown').title()}  

### Company Overview
{company_data.get('analysis', 'No analysis available.')}

### Key Company Points
"""
        
        # Add key points for company
        company_key_points = company_data.get('key_points', [])
        if company_key_points:
            for i, point in enumerate(company_key_points, 1):
                report += f"{i}. {point}\n"
        else:
            report += "- No key points extracted\n"
        
        report += f"""

---

## 💡 Insights & Opinions

### Social Media & Blog Analysis
{insights_data.get('insights', 'No insights available.')}

### Key Opinions & Viewpoints
"""
        
        # Add key opinions
        key_opinions = insights_data.get('key_opinions', [])
        if key_opinions:
            for i, opinion in enumerate(key_opinions, 1):
                report += f"{i}. {opinion}\n"
        else:
            report += "- No specific opinions extracted\n"
        
        report += """

---

## 📋 Meeting Preparation Summary

### What to Know Before the Meeting:
"""
        
        # Generate meeting prep based on person type
        person_type = person_data.get('type', 'unknown')
        if person_type == 'investor':
            report += self._generate_investor_meeting_prep(person_data, company_data, insights_data)
        elif person_type == 'founder':
            report += self._generate_founder_meeting_prep(person_data, company_data, insights_data)
        else:
            report += self._generate_general_meeting_prep(person_data, company_data, insights_data)
        
        report += f"""

---

*Report generated by AI Research Agent*  
*Data accuracy depends on publicly available information*
"""
        
        return report
    
    def generate_quick_report(self, person_name: str, company_name: str, 
                            person_analysis: Dict, company_analysis: Dict) -> str:
        """Generate a quick summary report"""
        
        report = f"""# Quick Research: {person_name} at {company_name}

*Generated: {datetime.now().strftime('%Y-%m-%d %H:%M')}*

## Person Summary
{person_analysis.get('analysis', 'No analysis available.')[:500]}...

## Company Summary  
{company_analysis.get('analysis', 'No analysis available.')[:500]}...

## Meeting Readiness
- Person Type: {person_analysis.get('type', 'Unknown')}
- Company Type: {company_analysis.get('type', 'Unknown')}
- Recommended talking points based on their background and company focus

*This is a quick summary. Run full research for detailed insights.*
"""
        return report
    
    def generate_investor_report(self, person_name: str, vc_firm: str, 
                               analysis: Dict, insights: Dict) -> str:
        """Generate investor-focused report"""
        
        report = f"""# Investor Profile: {person_name} at {vc_firm}

*Generated: {datetime.now().strftime('%Y-%m-%d %H:%M')}*

## Investment Profile
{analysis.get('analysis', 'No analysis available.')}

## Investment Philosophy & Opinions
{insights.get('insights', 'No insights available.')}

## Key Preparation Points for Pitch Meeting:
- Research their portfolio companies for relevant examples
- Understand their investment thesis and focus areas  
- Prepare questions about their recent investments
- Align your pitch with their stated interests and opinions
- Be ready to discuss market trends they've commented on

## Next Steps:
- Review their portfolio companies
- Read their recent blog posts or tweets
- Prepare specific questions about their investment approach
"""
        return report
    
    def _generate_investor_meeting_prep(self, person_data: Dict, company_data: Dict, insights_data: Dict) -> str:
        """Generate meeting prep for investors"""
        prep = """
1. **Investment Focus**: Research their investment thesis and portfolio companies
2. **Recent Opinions**: Review their latest thoughts on market trends and opportunities  
3. **Portfolio Alignment**: Identify how your business aligns with their existing investments
4. **Questions to Ask**: Prepare thoughtful questions about their investment approach
5. **Market Perspective**: Be ready to discuss industry trends they've commented on
"""
        return prep
    
    def _generate_founder_meeting_prep(self, person_data: Dict, company_data: Dict, insights_data: Dict) -> str:
        """Generate meeting prep for founders"""
        prep = """
1. **Company Understanding**: Know their business model, recent developments, and challenges
2. **Personal Background**: Understand their journey and key achievements
3. **Industry Expertise**: Be prepared to discuss industry trends and opportunities
4. **Potential Collaboration**: Identify areas where you might work together
5. **Shared Interests**: Look for common ground in their public statements and opinions
"""
        return prep
    
    def _generate_general_meeting_prep(self, person_data: Dict, company_data: Dict, insights_data: Dict) -> str:
        """Generate general meeting prep"""
        prep = """
1. **Professional Background**: Review their experience and expertise areas
2. **Company Context**: Understand their role and company's position in the market
3. **Recent Activities**: Be aware of their latest projects and public statements
4. **Common Ground**: Identify shared interests or experiences
5. **Relevant Questions**: Prepare thoughtful questions about their work and industry
"""
        return prep
    
    def save_report(self, report: str, filename: str = None) -> str:
        """Save report to file"""
        if not filename:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"research_report_{timestamp}.md"
        
        # Create reports directory if it doesn't exist
        os.makedirs("reports", exist_ok=True)
        
        filepath = os.path.join("reports", filename)
        
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(report)
            return filepath
        except Exception as e:
            print(f"Error saving report: {e}")
            return None